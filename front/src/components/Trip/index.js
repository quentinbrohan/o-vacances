/* eslint-disable jsx-a11y/label-has-associated-control */
/* eslint-disable react/jsx-curly-brace-presence */
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import {
  Calendar,
  MapPin,
  HelpCircle,
  XCircle,
  Lock,
  Share,
  Settings,
  XSquare,
} from 'react-feather';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import ReactTooltip from 'react-tooltip';
import Button from 'src/components/elements/Button';
// React Date Range
import 'react-date-range/dist/styles.css'; // main style file
import 'react-date-range/dist/theme/default.css'; // theme css file
import './dateRange_overrides.scss'; // Overrides default theme
import { DateRange } from 'react-date-range';
import { fr } from 'date-fns/locale';
import {
  // dateToString,
  toDate,
  toStringSuggestion,
  // toString,
  // ISOToString,
  // formatDate,
} from 'src/utils/format';
// import { parseISO } from 'date-fns';
import { Helmet } from 'react-helmet';

import { Link, useParams } from 'react-router-dom';
import Loading from 'src/components/Loading';
import Modal from 'react-modal';

import { API_URL, REACT_APP_URL } from 'src/constants';

// import tripData from 'src/data/tripData';
import TripAuth from 'src/containers/Trip/TripAuth';
import SuggestionForm from 'src/containers/Trip/SuggestionForm';
import ActivityForm from 'src/containers/ActivityForm';
import ActivityCard from './ActivityCard';
import PlusCard from './PlusCard';
import Suggestion from './Suggestion';
import './trip.scss';
import AddModal from './AddModal';

import { modalStyles } from 'src/utils/modal';

// Bind modal to App element
Modal.setAppElement('#root');

const Trip = ({
  trip,
  isLoading,
  isCreator,
  tripPassword,
  isOwnUser,
  userDisponibilities,
  reviseUserDisponibilities,
  addUserDisponibilities,
  handleTripDelete,
  checkTripAuth,
  haveTripAccess,
  handleSuggestionDelete,
}) => {
  const currentTrip = useParams().id;
  const tripId = Number(currentTrip);
  const [haveDisponibilities, setHaveDisponibilities] = useState(false);

  useEffect(() => {
    checkTripAuth(tripId);
  }, []);

  // Modal Help
  const [modalIsOpen, setIsOpen] = useState(false);
  function openModal() {
    setIsOpen(true);
  }
  function afterOpenModal() {
    // references are now sync'd and can be accessed.
  }

  function closeModal() {
    setIsOpen(false);
  }

  // Modal Disponibilities
  const [modalDispIsOpen, setDispIsOpen] = useState(false);
  function openDispModal() {
    setDispIsOpen(true);
  }
  function afterOpenDispModal() {
    // references are now sync'd and can be accessed.
  }

  function closeDispModal() {
    setDispIsOpen(false);
  }

  // User disponibilities
  // React Date Range
  const [state, setState] = useState([
    {
      startDate: null,
      endDate: null,
      key: 'selection',
    },
  ]);

  const [copied, setCopied] = useState({
    password: false,
    link: false,
  });

  useEffect(() => {
    if (userDisponibilities.length !== 0) {
      setState([
        {
          startDate: new Date(userDisponibilities.startDate),
          endDate: new Date(userDisponibilities.endDate),
          key: 'selection',
        },
      ]);
      setHaveDisponibilities(true);
    }
  }, [userDisponibilities]);

  const handleDisponibilities = () => {
    reviseUserDisponibilities(state);
  };

  const createDisponibilities = () => {
    addUserDisponibilities(state);
  };

  // const handleSuggestion = () => {
  //   addSuggestion();
  // };

  const manageTripDelete = () => {
    handleTripDelete();
  };

  const manageSuggestionDelete = (suggestionId) => {
    handleSuggestionDelete(suggestionId);
  };

  return (
    <main className="trip-details">
      {!isLoading && !haveTripAccess && <TripAuth tripId={tripId} />}
      {isLoading && <Loading />}
      {!isLoading && trip.length !== 0 && (
        <>
          <Helmet>
            <title>{trip.title}</title>
            <meta name="description" content="Un de mes voyages" />
          </Helmet>
          <img
            className="trip-photo"
            alt={trip.title}
            src={`${API_URL + trip.image}`}
          />
          <section className="trip-info">
            <div className="left">
              <div className="trip-info-header">
                <h1>{trip.title}</h1>
                <div className="date">
                  <Calendar />
                  <p>
                    Du {toDate(trip.startDate)} au {toDate(trip.endDate)}
                  </p>
                </div>
                <div className="location">
                  <MapPin />
                  <p>{trip.location}</p>
                </div>
                <div className="creator">
                  <p>
                    Cr√©√© par{' '}
                    {`${trip.creator.firstname} ${trip.creator.lastname}`}{' '}
                  </p>
                </div>
              </div>

              <div className="trip-info-description">
                <p className="description">{trip.description}</p>
              </div>
            </div>

            <div className="right">
              <div className="trip-info-aside">
                <div className="participants">
                  <p className="text">
                    {trip.users.length > 1
                      ? `${trip.users.length} participants`
                      : '1 participant'}
                  </p>
                  <div className="avatars">
                    {trip.users.map((user) => (
                      <img
                        key={user.firstname}
                        src={user.avatar ? API_URL + user.avatar : null}
                        alt={user.firstname}
                        className="avatar"
                      />
                    ))}
                  </div>
                </div>
                <div className="disponibilities">
                  <p htmlFor="disponibilities">Calendrier des disponibilit√©s</p>
                  <select name="disponibilities" id="disponibilities">
                    <option disabled>Participants</option>
                    {!isLoading
                      && trip.disponibility.length >= 1
                      && trip.disponibility.map((participant) => (
                        <option
                          key={participant.id}
                          disabled={isOwnUser}
                          defaultValue={isOwnUser}
                        >
                          {participant.users[0].firstname}: {''}
                          {toStringSuggestion(participant.startDate)} ü†í{' '}
                          {toStringSuggestion(participant.endDate)}
                        </option>
                      ))}
                  </select>
                  {/* if logged user => able to edit own disponibilities */}
                  <Button color="secondary" size="sm" onClick={openDispModal}>
                    Mes disponibilit√©s
                  </Button>
                  <Modal
                    isOpen={modalDispIsOpen}
                    onAfterOpen={afterOpenDispModal}
                    onRequestClose={closeDispModal}
                    style={modalStyles}
                    contentLabel="Disponibilit√©s"
                  >
                    <Button
                      color="secondary"
                      size="sm"
                      onClick={closeDispModal}
                      haveClassName="disponibilites-modal-button"
                    >
                      <XCircle />
                    </Button>
                    <DateRange
                      locale={fr}
                      editableDateInputs
                      onChange={(item) => setState([item.selection])}
                      moveRangeOnFirstSelection={false}
                      ranges={state}
                      direction="vertical"
                      minDate={new Date(trip.startDate)}
                      maxDate={new Date(trip.endDate)}
                      showMonthArrow
                      dateDisplayFormat="dd MMM yyyy"
                      startDatePlaceholder="D√©but disponibilit√©s"
                      endDatePlaceholder="Fin disponibilit√©s"
                    />
                    {/* CTA Add/Edit user disponiblities */}
                    {!isLoading && haveDisponibilities && (
                      <Button
                        color="secondary"
                        size="sm"
                        type="submit"
                        onClick={handleDisponibilities}
                      >
                        Modifier mes disponibilit√©s
                      </Button>
                    )}
                    {!haveDisponibilities && (
                      <Button
                        color="primary"
                        size="sm"
                        type="submit"
                        onClick={createDisponibilities}
                      >
                        Ajouter mes disponibilit√©s
                      </Button>
                    )}
                  </Modal>
                </div>
                <div className="trip-access">
                  <div className="trip-password">
                    {/* <p>Mot de passe voyage:</p> */}
                    <CopyToClipboard
                      text={tripPassword}
                      onCopy={() => setCopied({ ...copied, password: true })}
                    >
                      <Lock
                        data-tip
                        data-for="passwordTip"
                        style={{ cursor: 'pointer' }}
                      />
                    </CopyToClipboard>
                    <ReactTooltip id="passwordTip" place="top" effect="float">
                      {copied.password
                        ? '‚úÖ Copier le mot de passe'
                        : 'Copier le mot de passe'}
                    </ReactTooltip>
                    <input
                      type="text"
                      name="trip-password"
                      id="trip-password"
                      value={tripPassword}
                      disabled
                    />
                  </div>
                  <div className="trip-link">
                    {/* <p>Lien du voyage:</p> */}
                    <CopyToClipboard
                      text={`${REACT_APP_URL}/voyage/${trip.id}`}
                      onCopy={() => setCopied({ ...copied, link: true })}
                    >
                      <Share
                        data-tip
                        data-for="linkTip"
                        style={{ cursor: 'pointer' }}
                      />
                    </CopyToClipboard>
                    <ReactTooltip id="linkTip" place="top" effect="float">
                      {copied.link
                        ? '‚úÖ Copier le lien'
                        : 'Copier le lien'}
                    </ReactTooltip>
                    <Link
                      href={`${REACT_APP_URL}/voyage/${trip.id}`}
                      className="link"
                    >
                      {/* Shall be prod url */}
                      {`${REACT_APP_URL}/voyage/${trip.id}`}
                    </Link>
                  </div>
                </div>
                <div className="trip-buttons">
                  <AddModal />
                  {/* OnClick copy Link to Clipboard ? */}
                  {isCreator && (
                    <>
                      <Button
                        color="secondary"
                        size="sm"
                        type="submit"
                        className="trip-button"
                      >
                        <Link to={`/modifier-un-voyage/${tripId}`}>
                          {' '}
                          <Settings />
                        </Link>
                      </Button>
                      <Button
                        color="secondary"
                        size="sm"
                        type="submit"
                        className="trip-button"
                        onClick={() => manageTripDelete()}
                      >
                        <XSquare />
                      </Button>
                      {/* <Button color="secondary" size="sm" type="submit">
                        <Plus />
                      </Button> */}
                    </>
                  )}
                  <div className="trip-help">
                    <Button color="secondary" size="sm" onClick={openModal}>
                      <HelpCircle />
                    </Button>
                    <Modal
                      isOpen={modalIsOpen}
                      onAfterOpen={afterOpenModal}
                      onRequestClose={closeModal}
                      style={modalStyles}
                      contentLabel="Aide voyage"
                    >
                      <Button
                        color="secondary"
                        size="sm"
                        onClick={closeModal}
                        haveClassName="help-modal-button"
                      >
                        <XCircle />
                      </Button>
                      <h2>Besoin d'aide ?</h2>
                      <div>
                        Le mot de passe donne acc√®s au voyage, il est n√©cessaire
                        lors de la premi√®re connexion pour s'authentifier au
                        voyage uniquement, et n'est modifiable que par le
                        cr√©ateur du voyage.
                        <hr />
                        {/*
                    Le bouton "Modifier mes disponibilit√©s" appara√Æt uniquement pour l'utilisateur
                    connect√© quand celui-ci est selectionn√© dans la liste.
                    */}
                        Pour changer ses disponibilit√©s en un clic, il suffit de
                        changer ses disponibilit√©s dans le calendrier, ce
                        dernier se ferme une fois avoir choisi 2 dates. Cliquer
                        maintenant sur "Modifier mes disponibilit√©s".
                        <hr />
                        La suppression d'un voyage ne peut se faire que par un
                        utilisateur ayant le r√¥le "cr√©ateur" (le cr√©ateur du
                        voyage). Autrement, le voyage n'est pas supprim√© mais
                        vous n'y aurez plus acc√®s.
                        <hr />
                        Tout le monde peut proposer une activit√© ainsi qu'une
                        suggestion.
                        <hr />
                        Des id√©es pour am√©liorer O'vacances ? Fais-nous en part
                        gr√¢ce √† notre <Link to="/contact">page contact</Link> !
                      </div>
                    </Modal>
                  </div>
                </div>
              </div>
            </div>
          </section>
          <section className="activities">
            <div className="activity-header">
              <h2>Mes activit√©s</h2>
              {/* <ActivityForm color="primary" size="sm" /> */}
            </div>
            <div className="trip-activities">
              {trip.activities.slice(0, 5).map((activity) => (
                <ActivityCard {...activity} key={activity.id} />
              ))}
              {trip.activities.length > 5 && <PlusCard id={trip.id} />}
            </div>
          </section>

          <section className="suggestions">
            <h2>Suggestions</h2>
            <div className="trip-suggestions">
              {trip.suggestion.length >= 1
                && !isLoading
                && trip.suggestion.map((sugg) => (
                  <Suggestion
                    {...sugg}
                    key={sugg.id}
                    handleSuggestionDelete={manageSuggestionDelete}
                  />
                ))}
            </div>
            {/* <SuggestionForm /> */}
          </section>
        </>
      )}
    </main>
  );
};

Trip.propTypes = {
  checkTripAuth: PropTypes.func.isRequired,
  trip: PropTypes.PropTypes.oneOfType([PropTypes.array, PropTypes.object])
    .isRequired,
  isLoading: PropTypes.bool.isRequired,
  isCreator: PropTypes.bool.isRequired,
  tripPassword: PropTypes.string.isRequired,
  isOwnUser: PropTypes.bool.isRequired,
  userDisponibilities: PropTypes.array,
  reviseUserDisponibilities: PropTypes.func.isRequired,
  addUserDisponibilities: PropTypes.func.isRequired,
  handleTripDelete: PropTypes.func.isRequired,
  haveTripAccess: PropTypes.bool.isRequired,
  handleSuggestionDelete: PropTypes.func.isRequired,
};

Trip.defaultProps = {
  userDisponibilities: [],
};

export default Trip;
